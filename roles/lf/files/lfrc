# lf configuration file

# Basic settings
set hidden true
set ignorecase true
set icons true
set sortby time
set reverse true
set info size:time
set dircounts true
set tabstop 4
set scrolloff 5
set period 1
set hiddenfiles ".*:*.aux:*.log:*.toc"

# mouse support
set mouse true
map <m-3> updir

# shell commands
map <enter> shell <space>$f
map <lt> shell

# Show the result of execution of previous commands
map ` !true

# Execute current file (must be executable)
map x $$f
map X !$f

# Dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# Define a custom 'open' command
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# Define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map r push :rename<space>

# Make sure trash folder exists
%mkdir -p ~/.local/share/Trash/files

# Move current file or selected files to trash folder
cmd trash %set -f; mv $fx ~/.local/share/Trash/files

# Define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# Use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
map D delete

# Extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# Compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# Compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Define a custom 'fzf_jump' command
cmd fzf_jump ${{
    res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
    if [ -f "$res" ]; then
        cmd="select"
    elif [ -d "$res" ]; then
        cmd="cd"
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump

# Use y to copy and P to paste
map y copy
map p paste
map P :paste; clear


# Navigation shortcuts
map gh cd ~
map gd cd ~/Downloads
map gD cd ~/Documents
map gp cd ~/Pictures
map gc cd ~/.config
map gl cd ~/.local
map gs cd ~/.local/share

# Create new directory/file
map md push :mkdir<space>
map mf push :$touch<space>

# Sort mappings
map sn :set sortby natural; set reverse false; set info
map ss :set sortby size; set reverse true; set info size
map st :set sortby time; set reverse true; set info time
map sa :set sortby atime; set reverse true; set info atime
map sc :set sortby ctime; set reverse true; set info ctime
map se :set sortby ext; set reverse false; set info

# Show file info
map i ${{
    echo "File: $f"
    file "$f"
    echo "Size: $(du -h "$f" | cut -f1)"
    echo "Modified: $(stat -c %y "$f")"
}}
